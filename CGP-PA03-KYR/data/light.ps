////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
	float4 type : TEXCOORD2;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float fogFactor : FOG;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	//fog effect
	float4 fogColor;
	float4 finalColor;

    //Light and Texture
    float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	// Set the color of the fog to grey
	fogColor = float(0.5f,0.5f,0.5f,1.0f);
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));
	
	if(type.r==1.0f)
	{
	   color = ambientColor;	    
	}
	if(lightIntensity > 0.0f)
    {
	    if(type.g == 1.0f)
    	{
          // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
          color += (diffuseColor * lightIntensity);
        }
	    // Saturate the ambient and diffuse color.
		color = saturate(color);

        // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
        reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);


    }

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    
	color = color * textureColor;

	if(type.b==1.0f)
	{
	     color = saturate(color + specular);
	}

	//Calculate the final color using ths fog effect equatrion
	finalColor = input.fogFactor * tectureColor + (1.0f - input.fogFactor)*fogColor;

	color = color * finalColor;

	color = saturate(color));
	
	return color;
	
	
}