////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[4];
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor; 
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
	float4 type : TEXCOORD2;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;

	
	 //Bump Texture mapping
    float3 tangent : TANGENT; // 법선
    float3 binormal : BINORMAL; //종법선_ normal과 Tangent를 외적
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    //Texture
    float4 textureColor;

	float4 color1; //diffuse texture
	float4 color2; //ambidient texture 색상
	float4 color3; //normal texture
	float4 color4; //specular texture
	float4 blendColor;

	
	float4 bumpMap;
	float3 bumpNormal;

	//Get the pixel color from the first texture
	color1 = shaderTextures[0].Sample(SampleType, input.tex);

	//Get the pixel color from the second texture
	color2 = shaderTextures[1].Sample(SampleType, input.tex);

	color3 =  shaderTextures[2].Sample(SampleType, input.tex);
	color4 =  shaderTextures[3].Sample(SampleType, input.tex);

	//Blend the two pixels together and multiply by the gamma value.
	if(color2.r == 0.0f &&color2.g == 0.0f&&color2.b == 0.0f&&color2.a == 0.0f) blendColor = color1;
	else
		blendColor = color1 * color2 * 2.0 ;

	//Saturate the final color.
	//textureColor = saturate(blendColor);
	textureColor = blendColor;

	//범프맵 적용
	bumpMap = color3;
	//Expend the range of the normal value from (0,+1) to (-1,+1)
	//샘플링 된 값이 0~1사이인데 범프맵 연산을 위한 범위의 반쪽밖에 안되서 -1~+1 되게 하는 것임!!
	bumpMap = (blendColor * 2.0f) - 1.0f;
	//Calculate the normal from the data in the bump map

	bumpNormal = input.normal + bumpMap.x * input.tangent + bumpMap.y*input.binormal;
	bumpNormal = normalize(bumpNormal);

	//Light
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
	color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
	if(color3.r == 0.0f &&color3.g == 0.0f&&color3.b == 0.0f&&color3.a == 0.0f)  lightIntensity = saturate(dot(input.normal, lightDir));
	else  lightIntensity = saturate(dot(bumpNormal, lightDir));
   
   //Sample the pixel
	
	if(type.r==1.0f)
	{
	   color = ambientColor;	    
	}
	if(lightIntensity > 0.0f)
    {
	    if(type.g == 1.0f)
    	{
          // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
          color += (diffuseColor * lightIntensity);
        }
	    // Saturate the ambient and diffuse color.
		color = saturate(color);

		//Specular
		float4 specularIntensity;

		specularIntensity = color4;

        // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		if(specularIntensity.r == 0.0f &&specularIntensity.g == 0.0f&&color3.b == 0.0f&&specularIntensity.a == 0.0f) reflection = normalize(2 * lightIntensity * input.normal - lightDir); 
		else
			reflection = normalize(2 * lightIntensity * bumpNormal - lightDir); 
			
        

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
		if(!(specularIntensity.r == 0.0f &&specularIntensity.g == 0.0f&&specularIntensity.b == 0.0f&&specularIntensity.a == 0.0f))  specular = specular * specularIntensity;
			
    }

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    
	color = color * textureColor;

	if(type.b==1.0f)
	{
	     color = saturate(color + specular);
	}
	
	return color;
	
	
}